@using FuelStation.Blazor.Shared.DTOs.Customer

@inject HttpClient Http
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

@page "/customer"

<h3>Customers</h3>

@if (entities == null)
{
    <p>Loading...</p>
}
else
{

    <button class="btn btn-primary mb-5" @onclick="Add">Add new customer</button>

    <div class="table-responsive p-3">

        <table class="table table-dark table-striped table-hover">

            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Surname</th>
                    <th>Card Number</th>
                    <th>Actions</th>
                </tr>
            </thead>

            <tbody>
                @foreach (var e in entities)
                {
                    <tr>
                        <td>@e.Id</td>
                        <td>@e.Name</td>
                        <td>@e.Surname</td>
                        <td>@e.CardNumber</td>
                        <td>
                            <button class="btn btn-warning" @onclick="() => Edit(e)">Edit</button>
                            <button class="btn btn-danger" @onclick="() => Delete(e)">Delete</button>
                            <button class="btn btn-secondary" @onclick="() => DetailCustomer(e)">Details</button>
                        </td>
                    </tr>
                }
            </tbody>

        </table>

    </div>
}

@code {

    private List<CustomerDto>? entities;

    protected override async Task OnInitializedAsync()
    {
        await LoadItemsFromServer();

    }

    private async Task LoadItemsFromServer()
    {
        entities = await Http.GetFromJsonAsync<List<CustomerDto>>("customer");
    }

    private void Add()
    {
        navigationManager.NavigateTo("customer/edit");
    }

    private void Edit(CustomerDto entity)
    {
        navigationManager.NavigateTo($"customer/edit/{entity.Id}");
    }

    private void DetailCustomer(CustomerDto customer)
    {
        navigationManager.NavigateTo($"customer/details/{customer.Id}");
    }

    private async Task Delete(CustomerDto entity)
    {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Confirm customer deletion?");
        if (confirm)
        {
            var response = await Http.DeleteAsync($"customer/{entity.Id}");
            response.EnsureSuccessStatusCode();
            await LoadItemsFromServer();
        }

    }

}