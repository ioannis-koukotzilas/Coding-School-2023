@using FuelStation.Blazor.Shared.DTOs.Customer
@using FuelStation.Blazor.Shared.Services

@page "/customer/edit/{Id:int?}"

@inject HttpClient Http
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@inject ILoginService loginService

@if (Customer == null)
{
    <Spinner />
}
else if (loginService.Role == "Manager" || loginService.Role == "Cashier")
{
    @if (Id == null)
    {
        <PageTitle>New Customer - Fuel Station</PageTitle>
        <h2 class="mb-5">Add new customer</h2>
    }
    else
    {
        <PageTitle>Edit Customer @Customer.Name @Customer.Surname - Fuel Station</PageTitle>
        <h2 class="mb-5">Edit customer @Customer.Id: @Customer.Name @Customer.Surname</h2>
    }

    <button class="btn btn-warning mb-5" @onclick="GenerateNewCardNumber">Generate Card Number</button>

    <EditForm Model="Customer" OnValidSubmit="Save">
        <DataAnnotationsValidator />

        <div class="row mb-3">

            <div class="col-md-6 mb-3">
                <label class="form-label">Customer Name</label>
                <input class="form-control" type="text" placeholder="Enter customer name" @bind-value=@Customer.Name />
                <ValidationMessage For="@(() => Customer.Name)" />
            </div>

            <div class="col-md-6 mb-3">
                <label class="form-label">Customer Surname</label>
                <input class="form-control" type="text" placeholder="Enter customer surname" @bind-value=@Customer.Surname />
                <ValidationMessage For="@(() => Customer.Surname)" />
            </div>

            <div class="col-md-6 mb-3">
                <label class="form-label">Customer Card Number</label>
                <input class="form-control" type="text" placeholder="Click generate button to create a new card number" disabled @bind-value=@Customer.CardNumber />
                <ValidationMessage For="@(() => Customer.CardNumber)" />
            </div>

        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <div class="btn-group" role="group" aria-label="Actions">
                    <button class="btn btn-primary" type="submit">Save</button>
                    <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                </div>
            </div>
        </div>

    </EditForm>
}
else
{
    <PageTitle>Access Denied - Fuel Station</PageTitle>
    <AccessDenied />
}


@code {

    [Parameter] public int? Id { get; set; }

    CustomerEditDto? Customer { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id == null)
        {
            Customer = new();
        }
        else
        {
            Customer = await Http.GetFromJsonAsync<CustomerEditDto>($"customer/edit/{Id}");
        }
    }

    private void Cancel()
    {
        navigationManager.NavigateTo("customers");
    }

    private async Task Save()
    {
        HttpResponseMessage? response = null;

        if (Id == null)
        {
            response = await Http.PostAsJsonAsync("customer", Customer);
        }
        else
        {
            response = await Http.PutAsJsonAsync("customer", Customer);
        }

        response.EnsureSuccessStatusCode();
        navigationManager.NavigateTo("customers");
    }

    private async Task GenerateNewCardNumber()
    {
        if (Customer != null)
        {
            string generatedCardNumber = await Http.GetStringAsync("/customer/card-generator");

            if (Id == null)
            {
                Customer.CardNumber = generatedCardNumber;
            }
            else
            {
                var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Confirm generate a new card number?");

                if (confirm)
                {
                    Customer.CardNumber = generatedCardNumber;
                }
            }

        }
    }

}


