@using FuelStation.Blazor.Shared.DTOs.Item
@using FuelStation.Models.Enums
@using FuelStation.Blazor.Shared.Services

@page "/item/edit/{Id:int?}"

@inject HttpClient Http
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@inject ILoginService loginService


@if (Item == null)
{
    <Spinner />
}
else if (loginService.Role == "Manager" || loginService.Role == "Cashier" || loginService.Role == "Staff")
{
    @if (Id == null)
    {
        <PageTitle>New Item - Fuel Station</PageTitle>
        <h2 class="mb-5"><span class="oi oi-tag"></span> Add new item</h2>
    }
    else
    {
        <PageTitle>Edit Item @Item.Description - Fuel Station</PageTitle>
        <h2 class="mb-5"><span class="oi oi-tag"></span> Edit item @Item.Id: @Item.Description</h2>
    }

    <EditForm Model="Item" OnValidSubmit="Save">
        <DataAnnotationsValidator />

        <div class="row mb-3">

            <div class="col-md-6 mb-3">
                <label class="form-label">Item Code</label>
                <input class="form-control" type="text" placeholder="Enter item code" @bind-value="Item.Code" />
                <ValidationMessage For="@(() => Item.Code)" />
            </div>

            <div class="col-md-6 mb-3">
                <label class="form-label">Item Description</label>
                <input class="form-control" type="text" placeholder="Enter item description" @bind-value="Item.Description" />
                <ValidationMessage For="@(() => Item.Description)" />
            </div>

            <div class="col-md-6 mb-3">
                <label class="form-label">Item Type</label>
                <select class="form-select" @bind="Item.ItemType">
                    @foreach (var it in Enum.GetValues<ItemType>())
                    {
                        <option value="@it">@it</option>
                    }
                </select>
            </div>

            <div class="col-md-6 mb-3">
                <label class="form-label">Item Price</label>
                <input class="form-control" @bind-value="Item.Price" />
                <ValidationMessage For="@(() => Item.Price)" />
            </div>

            <div class="col-md-6 mb-3">
                <label class="form-label">Item Cost</label>
                <input class="form-control" @bind-value="Item.Cost" />
                <ValidationMessage For="@(() => Item.Cost)" />
            </div>

        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <div class="btn-group" role="group" aria-label="Actions">
                    <button class="btn btn-primary" @onclick="Cancel">Cancel</button>
                    <button class="btn btn-success" type="submit">Save</button>
                </div>
            </div>
        </div>

    </EditForm>
}
else
{
    <PageTitle>Access Denied - Fuel Station</PageTitle>
    <AccessDenied />
}

@code {

    [Parameter] public int? Id { get; set; }

    ItemEditDto? Item { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id == null)
        {
            Item = new();
            Item.ItemType = ItemType.Product;
        }
        else
        {
            Item = await Http.GetFromJsonAsync<ItemEditDto>($"item/edit/{Id}");
        }
    }

    private void Cancel()
    {
        navigationManager.NavigateTo("items");
    }

    private async Task Save()
    {
        HttpResponseMessage? response = null;

        if (Id == null)
        {
            response = await Http.PostAsJsonAsync("item", Item);
        }
        else
        {
            response = await Http.PutAsJsonAsync("item", Item);
        }

        response.EnsureSuccessStatusCode();
        navigationManager.NavigateTo("items");
    }

}