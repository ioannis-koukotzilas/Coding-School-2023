@using FuelStation.Blazor.Shared.DTOs.Transaction
@using FuelStation.Blazor.Shared.DTOs.Customer
@using FuelStation.Blazor.Shared.DTOs.Employee
@using FuelStation.Models.Enums

@page "/transaction/edit/{Id:int?}"

@inject HttpClient Http
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime


@if (Transaction == null && Transaction.Customers == null && Transaction.Employees == null)
{
    <Spinner />
}
else
{
    @if (Id == null)
    {
        <PageTitle>New Transaction - Fuel Station</PageTitle>
        <h2 class="mb-5">Add new transaction</h2>
    }
    else
    {
        <PageTitle>Edit Transaction @Transaction.Id - Fuel Station</PageTitle>
        <h2 class="mb-5">Edit transaction: (@Transaction.Id)</h2>
    }

    // Transaction

    <div class="row mb-5">

        <div class="col-md-6 mb-3">
            <label class="form-label">Customer</label>
            <select class="form-select" @bind="Transaction.CustomerId">
                @foreach (var c in Transaction.Customers)
                {
                    <option value="@c.Id">@c.Name @c.Surname</option>
                }
            </select>
        </div>

        <div class="col-md-6 mb-3">
            <label class="form-label">Employee</label>
            <select class="form-select" @bind="Transaction.EmployeeId">
                @foreach (var e in Transaction.Employees)
                {
                    <option value="@e.Id">@e.Name @e.Surname</option>
                }
            </select>
        </div>




        <div class="col-md-6 mb-3">
            <label class="form-label">Transaction Date</label>
            <input class="form-control" type="date" @bind-value="Transaction.Date" />
        </div>

        <div class="col-md-6 mb-3">
            <label class="form-label">Payment Method</label>
            <select class="form-select" @bind="Transaction.PaymentMethod">
                @foreach (var pm in Enum.GetValues<PaymentMethod>())
                {
                    <option value="@pm">@pm</option>
                }
            </select>
        </div>

        <div class="col-md-6 mb-3">
            <label class="form-label">Total Value</label>
            <input class="form-control" type="number" @bind-value="Transaction.TotalValue" />
        </div>

    </div>


    // Transaction Lines

    <h3 class="mb-3">Transaction Lines</h3>

    <div class="row mb-4">
        <div class="input-group">
            <input class="form-control" placeholder="new..." @bind-value="Test" />
            <button class="btn btn-warning" @onclick="() => AddTransactionLine()">Add transaction line</button>
        </div>
    </div>

    <div class="table-responsive p-3 mb-3">

        <table class="table table-dark table-striped table-hover">

            <thead>
                <tr>
                    <th>ID</th>
                    <th>Quantity</th>
                    <th>Item Price</th>
                    <th>Net Value</th>
                    <th>Discount Percent</th>
                    <th>Discount Value</th>
                    <th>Total Value</th>
                </tr>
            </thead>

            <tbody>
                @foreach (var tl in Transaction.TransactionLines)
                {
                    <tr>
                        <td>@tl.Id</td>
                        <td>@tl.Quantity</td>
                        <td>@tl.ItemPrice</td>
                        <td>@tl.NetValue</td>
                        <td>@tl.DiscountPercent</td>
                        <td>@tl.DiscountValue</td>
                        <td>@tl.TotalValue</td>

                        <td>
                            @*<button class="btn btn-warning" @onclick="() => Edit(t)">Edit</button>
                                <button class="btn btn-danger" @onclick="() => Delete(t)">Delete</button>*@
                        </td>
                    </tr>
                }
            </tbody>

        </table>

    </div>





    <div class="row mb-3">
        <div class="col-md-6">
            <div class="btn-group" role="group" aria-label="Actions">
                <button class="btn btn-primary" @onclick="Save">Save</button>
                <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </div>
        </div>
    </div>

    @*</EditForm>*@
}

@code {

    [Parameter] public int? Id { get; set; }

    TransactionEditDto? Transaction { get; set; }

    decimal Test;

    protected override async Task OnInitializedAsync()
    {

        if (Id == null)
        {
            Transaction = new();

            Transaction.Date = DateTime.Today;

            await LoadFromServer();

            //Item.ItemType = ItemType.Product;
        }
        else
        {
            Transaction = await Http.GetFromJsonAsync<TransactionEditDto>($"transaction/edit/{Id}");
        }

    }

    private async Task LoadFromServer()
    {
        var cc = await Http.GetFromJsonAsync<List<CustomerEditDto>>("customer");
        var ee = await Http.GetFromJsonAsync<List<EmployeeEditDto>>("employee");

        if (cc != null && ee != null && Transaction != null)
        {
            Transaction.Customers = cc;
            Transaction.Employees = ee;
        }
    }


    // OK

    private void Cancel()
    {
        navigationManager.NavigateTo("transactions");
    }

    // OK

    private async Task Save()
    {
        HttpResponseMessage? response = null;

        if (Id == null)
        {
            response = await Http.PostAsJsonAsync("transaction", Transaction);
        }
        else
        {
            response = await Http.PutAsJsonAsync("transaction", Transaction);
        }

        response.EnsureSuccessStatusCode();
        navigationManager.NavigateTo("transactions");
    }

    // TL


    private void AddTransactionLine()
    {
        Transaction.TransactionLines.Add(new TransactionLineDto
        {
            ItemPrice = Test

        });
    }

    private void DeleteTransactionLine(TransactionLineDto transactionLine)
    {
        Transaction.TransactionLines.Remove(transactionLine);
    }


}
