@using FuelStation.Blazor.Shared.DTOs.Transaction
@using FuelStation.Blazor.Shared.DTOs.TransactionLine
@using FuelStation.Blazor.Shared.DTOs.Customer
@using FuelStation.Blazor.Shared.DTOs.Employee
@using FuelStation.Blazor.Shared.DTOs.Item
@using FuelStation.Models.Enums

@page "/transaction/edit/{Id:int?}"

@inject HttpClient Http
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

@if (Transaction == null || Transaction.Customers == null || Transaction.Employees == null || TransactionLine?.Items == null)
{
    <Spinner />
}

else
{
    @if (Id == null)
    {
        <PageTitle>New Transaction - Fuel Station</PageTitle>
        <h2 class="mb-5">Add new transaction</h2>
    }
    else
    {
        <PageTitle>Edit Transaction @Transaction.Id - Fuel Station</PageTitle>
        <h2 class="mb-5">Edit transaction: (@Transaction.Id)</h2>
    }

    // Transaction

    <div class="row mb-5">

        <div class="col-md-6 mb-3">
            <label class="form-label">Customer</label>
            <select class="form-select" @bind="Transaction.CustomerId">
                @foreach (var c in Transaction.Customers)
                {
                    <option value="@c.Id">@c.Name @c.Surname</option>
                }
            </select>
        </div>

        <div class="col-md-6 mb-3">
            <label class="form-label">Employee</label>
            <select class="form-select" @bind="Transaction.EmployeeId">
                @foreach (var e in Transaction.Employees)
                {
                    <option value="@e.Id">@e.Name @e.Surname</option>
                }
            </select>
        </div>

        <div class="col-md-6 mb-3">
            <label class="form-label">Transaction Date</label>
            <input class="form-control" type="date" @bind-value="Transaction.Date" />
        </div>

        <div class="col-md-6 mb-3">
            <label class="form-label">Payment Method</label>
            <select class="form-select" @bind="Transaction.PaymentMethod">
                @foreach (var pm in Enum.GetValues<PaymentMethod>())
                {
                    <option value="@pm">@pm</option>
                }
            </select>
        </div>

        <div class="col-md-6 mb-3">
            <label class="form-label">Total Value</label>
            @*<input class="form-control" type="number" @bind-value="Transaction.TotalValue" />*@
            @*<input class="form-control" type="number" value="@Transaction.TotalValue" readonly />*@
        </div>


        <div class="col-md-6 mb-3">
            <label class="form-label">Total Value</label>
            <h1>@Transaction.TransactionTotalValue</h1>
        </div>


    </div>


    // Transaction Lines

    /* Business:
    * Net Value is calculated by multiplying the quantity with the item price.
    * Discount Value is calculated by multiplying Net Value by Discount Percent.
    * Total Value is calculated by subtracting Discount Value from the Net Value.
    * If a Transaction Line includes an item of the type Fuel and its NetValue is
    * above 20 euros, then we calculate a 10% discount on that transaction line. */

    <h4 class="mb-3">Transaction Lines</h4>

    <div class="row mb-4">

        <div class="col-md-6">
            <label class="form-label">Select Item</label>
            <select class="form-select" @bind="TransactionLine.ItemId">
                @foreach (var i in TransactionLine.Items)
                {
                    <option value="@i.Id">@i.Code @i.Price</option>
                }
            </select>
        </div>

        <div class="col-md-3">
            <label class="form-label">Quantity</label>
            <input class="form-control" type="number" @bind-value="TransQuantity" />
        </div>

        <div class="col-md-3">
            <button class="btn btn-warning" @onclick="() => AddTransactionLine()">Add transaction line</button>
        </div>

    </div>

    <div class="table-responsive p-3 mb-3">

        <table class="table table-dark table-striped table-hover">

            <thead>
                <tr>
                    <th>ID</th>
                    <th>Quantity</th>
                    <th>Item Price</th>
                    <th>Net Value</th>
                    <th>Discount %</th>
                    <th>Discount Value</th>
                    <th>Total Value</th>
                    <th>Item Id</th>
                    <th>Actions</th>
                </tr>
            </thead>

            <tbody>
                @foreach (var tl in Transaction.TransactionLines)
                {
                    <tr>
                        <td>@tl.Id</td>
                        <td>@tl.Quantity</td>
                        <td>@tl.ItemPrice   </td>
                        <td>@tl.NetValue</td>
                        <td>@tl.DiscountPercent</td>
                        <td>@tl.DiscountValue</td>
                        <td>@tl.TotalValue</td>
                        <td>@tl.ItemId</td>

                        <td>
                            <button class="btn btn-danger" @onclick="() => DeleteTransactionLine(tl)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>

        </table>

    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <div class="btn-group" role="group" aria-label="Actions">
                <button class="btn btn-primary" @onclick="Save">Save</button>
                <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </div>
        </div>
    </div>

}

@code {

    [Parameter] public int? Id { get; set; }

    TransactionEditDto? Transaction { get; set; }

    // Check
    TransactionLineDto? TransactionLine { get; set; }


    TransactionEditDtoTest? TransactionTest { get; set; }



    protected override async Task OnInitializedAsync()
    {

        if (Id == null)
        {
            Transaction = new();

            TransactionTest = new();

            Transaction.Date = DateTime.Today;

            await LoadFromServer();

        }
        else
        {
            Transaction = await Http.GetFromJsonAsync<TransactionEditDto>($"transaction/edit/{Id}");
        }

    }

    private async Task LoadFromServer()
    {
        var customers = await Http.GetFromJsonAsync<List<CustomerEditDto>>("customer");
        var employees = await Http.GetFromJsonAsync<List<EmployeeEditDto>>("employee");
        var items = await Http.GetFromJsonAsync<List<ItemEditDto>>("item");

        if (customers != null && employees != null && Transaction != null && items != null)
        {
            Transaction.Customers = customers;
            Transaction.Employees = employees;

            TransactionLine = new();
            TransactionLine.Items = items;
        }
    }

    private void Cancel()
    {
        navigationManager.NavigateTo("transactions");
    }

    private async Task Save()
    {
        HttpResponseMessage? response = null;

        if (Id == null)
        {
            response = await Http.PostAsJsonAsync("transaction", Transaction);
        }
        else
        {
            response = await Http.PutAsJsonAsync("transaction", Transaction);
        }

        response.EnsureSuccessStatusCode();
        navigationManager.NavigateTo("transactions");
    }


    // Transaction Lines

    int TransQuantity;

    private void AddTransactionLine()
    {
        var item = TransactionLine.Items.FirstOrDefault(i => i.Id == TransactionLine.ItemId);

        if (item == null)
        {
            // Handle error: item not found
            return;
        }




       


        var netValue = TransQuantity * item.Price;
        var discountPercent = (item.ItemType == ItemType.Fuel && netValue > 20) ? 10m : 0m;
        var discountValue = netValue * (discountPercent / 100m);
        discountValue = Decimal.Round(discountValue, 3);
        var totalValue = netValue - discountValue;

        Transaction.TransactionLines.Add(new TransactionLineDto
        {
            ItemId = item.Id,
            Quantity = TransQuantity,
            ItemPrice = item.Price,
            NetValue = netValue,
            DiscountPercent = discountPercent,
            DiscountValue = discountValue,
            TotalValue = totalValue
        });

        // reset the TransQuantity
        TransQuantity = 0;
    }

    decimal TransactionTotalValue => Transaction.TransactionLines.Sum(tl => tl.TotalValue);


    private void DeleteTransactionLine(TransactionLineDto transactionLine)
    {
        Transaction.TransactionLines.Remove(transactionLine);
    }

}
