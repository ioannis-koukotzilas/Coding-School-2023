@using FuelStation.Blazor.Shared.DTOs.Transaction
@using FuelStation.Blazor.Shared.DTOs.TransactionLine
@using FuelStation.Blazor.Shared.DTOs.Customer
@using FuelStation.Blazor.Shared.DTOs.Employee
@using FuelStation.Blazor.Shared.DTOs.Item
@using FuelStation.Models.Enums

@page "/transaction/edit/{Id:int?}"

@inject HttpClient Http
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

@if (isLoading)
{
    <Spinner />
}

else
{
    @if (Id == null)
    {
        <PageTitle>New Transaction - Fuel Station</PageTitle>
        <h2 class="mb-5">New transaction</h2>
    }
    else
    {
        <PageTitle>Edit Transaction @Transaction.Id - Fuel Station</PageTitle>
        <h2 class="mb-5">Edit transaction @Transaction.Id</h2>
    }

    // Transaction

    <div class="row mb-5">

        <div class="input-group">
            <input type="text" class="form-control" @bind="CustomerCardNumber" placeholder="Enter customer card number" />
            <button class="btn btn-primary" @onclick="FindCustomerByCardNumber">Search</button>
        </div>

        @if (CustomerFound == false)
        {
            <div class="row mb-5">
                <div class="mt-3 mb-3">Customer not found in the database. Create a new one?</div>
                <button class="btn btn-success mt-3" @onclick="CreateCustomer">Create Customer</button>
            </div>  
        }

    </div>

    <div class="row mb-5">

        <div class="col-md-6 mb-3">
            <label class="form-label">Customer</label>
            <select class="form-select" disabled @bind="Transaction.CustomerId">
                @foreach (var c in Transaction.Customers)
                {
                    <option value="@c.Id">@c.Name @c.Surname</option>
                }
            </select>
        </div>

        <div class="col-md-6 mb-3">
            <label class="form-label">Employee</label>
            <select class="form-select" @bind="Transaction.EmployeeId">
                @foreach (var e in Transaction.Employees)
                {
                    <option value="@e.Id">@e.Name @e.Surname</option>
                }
            </select>
        </div>

        <div class="col-md-6 mb-3">
            <label class="form-label">Transaction Date</label>
            <input class="form-control" type="date" @bind-value="Transaction.Date" />
        </div>

        <div class="col-md-6 mb-3">
            <label class="form-label">Payment Method</label>
            <select class="form-select" @bind="Transaction.PaymentMethod">
                @foreach (var pm in Enum.GetValues<PaymentMethod>())
                {
                    <option value="@pm">@pm</option>
                }
            </select>
        </div>

    </div>

    <div class="row mb-5">
        <div>Total Value</div>
        <div class="trans-total-value">@Transaction.TransactionTotalValue</div>
    </div>


    // Transaction Lines

    <h3 class="mb-5">Transaction Lines</h3>

    <div class="row mb-5">

        <div class="col-md-6">
            <div class="input-group">
                <span class="input-group-text">Select Item</span>
                <select class="form-select" @bind="TransactionLine.ItemId">
                    @foreach (var i in TransactionLine.Items)
                    {
                        <option value="@i.Id">@i.Description (@i.Price)</option>
                    }
                </select>
            </div>
        </div>

        <div class="col-md-2">
            <div class="input-group">
                <span class="input-group-text">Quantity</span>
                <input class="form-control" type="number" @bind-value="TransactionLineQuantity" />
            </div>
        </div>

        <div class="col-md-4">
            <button class="btn btn-primary" @onclick="() => AddTransactionLine()">Add Item</button>
        </div>

    </div>

    <div class="table-responsive p-3 mb-5">

        <table class="table table-dark table-striped table-hover">

            <thead>
                <tr>
                    <th>ID</th>
                    <th>Quantity</th>
                    <th>Item Price</th>
                    <th>Net Value</th>
                    <th>Discount %</th>
                    <th>Discount Value</th>
                    <th>Total Value</th>
                    <th>Item Id</th>
                    <th>Actions</th>
                </tr>
            </thead>

            <tbody>
                @foreach (var tl in Transaction.TransactionLines)
                {
                    <tr>
                        <td>@tl.Id</td>
                        <td>@tl.Quantity</td>
                        <td>@tl.ItemPrice   </td>
                        <td>@tl.NetValue</td>
                        <td>@tl.DiscountPercent</td>
                        <td>@tl.DiscountValue</td>
                        <td>@tl.TotalValue</td>
                        <td>@tl.ItemId</td>

                        <td>
                            <button class="btn btn-danger" @onclick="() => DeleteTransactionLine(tl)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>

        </table>

    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <div class="btn-group" role="group" aria-label="Actions">
                <button class="btn btn-primary" @onclick="Save">Save</button>
                <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </div>
        </div>
    </div>



}

@code {

    [Parameter] public int? Id { get; set; }

    TransactionEditDto? Transaction { get; set; }

    TransactionLineDto? TransactionLine { get; set; }

    bool isLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        if (Id == null)
        {

            Transaction = new TransactionEditDto();
            TransactionLine = new TransactionLineDto();

            Transaction.Date = DateTime.Now;

        }
        else
        {
            Transaction = await Http.GetFromJsonAsync<TransactionEditDto>($"transaction/edit/{Id}");
            TransactionLine = new TransactionLineDto();
        }

        await LoadJsonsFromServer();

        isLoading = false;

    }

    private async Task LoadJsonsFromServer()
    {
        // Fetch the customers
        var customersJson = await Http.GetFromJsonAsync<List<CustomerEditDto>>("customer");
        if (customersJson != null)
        {
            Transaction.Customers = customersJson;
        }

        // Fetch the employees
        var employeesJson = await Http.GetFromJsonAsync<List<EmployeeEditDto>>("employee");
        if (employeesJson != null)
        {
            Transaction.Employees = employeesJson;
        }

        // Fetch the items
        var itemsJson = await Http.GetFromJsonAsync<List<ItemEditDto>>("item");
        if (itemsJson != null)
        {
            TransactionLine.Items = itemsJson;
        }
    }

    private void Cancel()
    {
        navigationManager.NavigateTo("transactions");
    }

    private async Task Save()
    {
        HttpResponseMessage? response = null;

        if (Id == null)
        {
            response = await Http.PostAsJsonAsync("transaction", Transaction);
        }
        else
        {
            response = await Http.PutAsJsonAsync("transaction", Transaction);
        }

        response.EnsureSuccessStatusCode();
        navigationManager.NavigateTo("transactions");
    }


    // Transaction Lines

    int TransactionLineQuantity = 1;

    private void AddTransactionLine()
    {
        var item = TransactionLine.Items.FirstOrDefault(i => i.Id == TransactionLine.ItemId);

        if (item == null)
        {
            // Handle error: item not found
            return;
        }

        var netValue = TransactionLineQuantity * item.Price;
        var discountPercent = (item.ItemType == ItemType.Fuel && netValue > 20) ? 10m : 0m;
        var discountValue = netValue * (discountPercent / 100m);

        // TODO: fix decimal inputs
        discountValue = Decimal.Round(discountValue, 3);
        var totalValue = netValue - discountValue;

        Transaction.TransactionLines.Add(new TransactionLineDto
        {
            ItemId = item.Id,
            Quantity = TransactionLineQuantity,
            ItemPrice = item.Price,
            NetValue = netValue,
            DiscountPercent = discountPercent,
            DiscountValue = discountValue,
            TotalValue = totalValue
        });

        // Reset the Transaction Line Quantity
        TransactionLineQuantity = 1;
    }

    decimal TransactionTotalValue => Transaction.TransactionLines.Sum(tl => tl.TotalValue);


    private void DeleteTransactionLine(TransactionLineDto transactionLine)
    {
        Transaction.TransactionLines.Remove(transactionLine);
    }


    // Find customer

    string CustomerCardNumber;

    bool CustomerFound = true;

    private void FindCustomerByCardNumber()
    {
        var fetchCustomer = Transaction.Customers.FirstOrDefault(c => c.CardNumber == CustomerCardNumber);

        if (fetchCustomer != null)
        {
            Transaction.CustomerId = fetchCustomer.Id;
            CustomerFound = true;
        }
        else
        {
            CustomerFound = false;
        }
    }

    private void CreateCustomer()
    {
        navigationManager.NavigateTo("customer/new");
    }

}
