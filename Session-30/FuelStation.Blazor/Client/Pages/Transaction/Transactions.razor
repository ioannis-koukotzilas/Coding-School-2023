@using FuelStation.Blazor.Shared.DTOs.Transaction
@using FuelStation.Blazor.Shared.Services

@inject HttpClient Http
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@inject ILoginService loginService

@page "/transactions"

@if (transactions == null)
{
    <Spinner />
}
else if (loginService.Role == "Manager" || loginService.Role == "Cashier")
{
    <PageTitle>Transactions - Fuel Station</PageTitle>

    <h1 class="mb-5"><span class="oi oi-spreadsheet"></span> Transactions</h1>

    <button class="btn btn-primary mb-5" @onclick="Add">Add new transaction</button>

    <div class="table-responsive p-3">

        <table class="table table-dark table-striped table-hover">

            <thead>
                <tr>
                    <th>Transaction ID</th>
                    <th>Transaction Date</th>
                    <th>Total Value</th>
                    <th>Payment Method</th>
                    <th>Customer</th>
                    <th>Employee</th>
                    <th>Actions</th>
                </tr>
            </thead>

            <tbody>
                @foreach (var t in transactions)
                {
                    <tr>
                        <td>@t.Id</td>
                        <td>@t.Date</td>
                        <td>@t.TotalValue</td>
                        <td>@t.PaymentMethod</td>
                        <td>@t.CustomerName @t.CustomerSurname</td>
                        <td>@t.EmployeeName @t.EmployeeSurname (@t.EmployeeType)</td>
                        <td>
                            <div class="btn-group" role="group" aria-label="Actions">
                                <button class="btn btn-primary" @onclick="() => Edit(t)">Edit</button>
                                <button class="btn btn-danger" @onclick="() => Delete(t)">Delete</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>

        </table>

    </div>
}
else
{
    <PageTitle>Access Denied - Fuel Station</PageTitle>
    <AccessDenied />
}

@code {

    private List<TransactionListDto>? transactions;

    protected override async Task OnInitializedAsync()
    {
        await LoadItemsFromServer();

    }

    private async Task LoadItemsFromServer()
    {
        transactions = await Http.GetFromJsonAsync<List<TransactionListDto>>("transaction");
    }

    private void Add()
    {
        navigationManager.NavigateTo("transaction/edit");
    }

    private void Edit(TransactionListDto transaction)
    {
        navigationManager.NavigateTo($"transaction/edit/{transaction.Id}");
    }

    private async Task Delete(TransactionListDto transaction)
    {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Confirm transaction deletion?");
        if (confirm)
        {
            var response = await Http.DeleteAsync($"transaction/{transaction.Id}");
            response.EnsureSuccessStatusCode();
            await LoadItemsFromServer();
        }

    }

}